For each number from to , store its largest multiple that is present in array A.

N = (int) 1e6;
for(int i = 1; i <= n; ++i) {
    ++cntA[arr[i]]; // cnt array stores the count of each number in array A
}
for(int i = 1; i <= N; ++i) {
    for(int j = i; j <= N; j += i) {
        if(cntA[j]) {
            lmulA[i] = j; // lmulA[i] stores the largest multiple of i, present in A.
        }
    }
}

Also, for each number from to , store its largest multiple that is present in array B.

for(int i = 1; i <= n; ++i) {
    ++cntB[arr[i]]; // cntB array stores the count of each number in array B
}
for(int i = 1; i <= N; ++i) {
    for(int j = i; j <= N; j += i) {
        if(cntB[j]) {
            lmulB[i] = j; // lmulB[i] stores the largest multiple of i, present in B.
        }
    }
}

Now, iterate for each number from to , and find the largest number whose multiple is present in both the arrays. Lets say the number is mx.

int mx = 0;
	for(int i = 1; i <= N; ++i) {
		if(lmulA[i] > 0 && lmulB[i] > 0) {
			mx = i;
		}
	}

The answer is largest multiple of mx in array A + largest multiple of mx in array B.

int answer = lmulA[mx] + lmulB[mx];

Set by dipjal

Problem Setter's code :

#include "bits/stdc++.h"
using namespace std;
const int N = 1e6 + 6;
int cnt[N];
int lmulA[N];
int lmulB[N];
int n;
int arr[N];
int brr[N];
int main() {
	scanf("%d" , &n);
	for(int i = 1; i <= n; ++i) {
		scanf("%d" , arr + i);
	}
	for(int i = 1; i <= n; ++i) {
		scanf("%d" , brr + i);
	}
	for(int i = 1; i <= n; ++i) {
		++cnt[arr[i]];
	}
	for(int i = 1; i < N; ++i) {
		for(int j = i; j < N; j += i) {
			if(cnt[j]) {
				lmulA[i] = max(lmulA[i] , j);
			}
		}
	}
	for(int i = 1; i <= n; ++i) {
		--cnt[arr[i]];
	}
	for(int i = 1; i <= n; ++i) {
		++cnt[brr[i]];
	}
	for(int i = 1; i < N; ++i) {
		for(int j = i; j < N; j += i) {
			if(cnt[j]) {
				lmulB[i] = max(lmulB[i] , j);
			}
		}
	}
	int mx = 0;
	for(int i = 1; i < N; ++i) {
		if(lmulA[i] && lmulB[i]) {
			mx = i;
		}
	}
	printf("%d\n" , lmulA[mx] + lmulB[mx]);
	return 0;
}

