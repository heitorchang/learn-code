See also: good-practice/clojure.md

Integer division: quot and rem

BigDecimal: 0.0123M 
BigInt: 100991N 
(these are contagious)

Collection types:
list () : must be quoted or it will be interpreted as a function call
vector []
map {}
set #{}

regexp #""

keywords begin with a colon (an advantage over strings is being able to look themselves up in a map)
:points

reload a lib with (require ... :reload-all)

Java system properties (user.dir is like current working directory)

(into (sorted-map) (System/getProperties))

evaluating a lazy expression is called "realizing" the expression

(declare x y z) creates these vars with no initial binding at the same time

(defrecord Book [title author])
(def anne-with-an-e
  (->Book "Anne of Green Gables" "Lucy Maud Montgomery"))
(:title anne-with-an-e)

Book behaves almost like any regular map

strings must use double quotes

concatenate strings: (str "one plus two is " (+ 1 2))

(println "some text")

\a \b \c \space \return \newline (\r\n or CRLF)

true, false are booleans

in a Boolean context, only nil, false evaluate to "false"

0 and () are not "false"

(true? x) tests if x is exactly the "true" value (only true will return true)
nil? and false? also only test for nil and false

zero? works with 0 and 0.0

a closure is a function that remembers the environment values associated with it when it was created.

(java.util.Random.) is the same as (new java.util.Random)

(def rnd (java.util.Random.))

. (dot special form) is used to call methods and access instance fields. It also works for static methods and fields
in case both a method and field exist, the method is preferred. prefix with - to access the field.

(. rnd nextInt)

(.nextInt rnd) calls the instance method
(.-field instance)
(Class/method args)
Class/field

java.lang classes are imported automatically

evaluate
(import '(java.util Random Locale)
	'(java.text MessageFormat))

and the classes may be called directly (Random, Locale, MessageFormat

;; comments

(comment
  this is a macro
  )

#_(this form is ignored)

(do ...) is used to execute side effects

(loop) sets a recursion point, targeted by (recur)

(loop [result [] x 5]
  (if (zero? x)
    result
    (recur (conj result x) (dec x))))

recur can go back to the top of a function

XML and HTML are trees

seq is an abstraction that can be used for data structures (list, vector, map, set, tree), collections, strings, regular expression matches, directory structures and I/O streams. it is a logical list, not tied to a specific, concrete implementation.

rest is more lazy than next.
(next s) is (seq (rest s))

collection creation functions
(list 1 2 3)
(vector 1 2 3)
(hash-set :a :b :c)
(hash-map :a 1 :b 2 :c 3)

(set [1 2 3])
(vec '(1 2 3))

(filter pred coll)
(take-while pred coll)

(split-at 5 (range 10))
(split-with #(< % 10) (range 10))

(every? odd? [1 3 5])
(some odd? [2 3 5])

check if a sequence contains a matching element (uses a set)
(some #{3 5} (range 10))

(not-every? even? (range 10))
(not-any? even? (range 10))

(map f coll) applies f on each element of coll

map can take more than one collection. then f must be a function of that many arguments

reduce takes a function of two arguments, and repeatedly applies f on the first two elements, until all elements are used. it is useful for functions that "total up" a sequence

with (sort comparator coll), the comparator must implement java.util.Comparator. Java arrays are modified.

(for [binding-form coll-expr filter-expr? ...] expr)

(for [file "ABCDEFGH"
      rank (range 1 9)]
  (str file rank))

rank iterates firt

(map-indexed vector [:a :b :c]) creates a LazySeq ([0 :a] [1 :b] [2 :c])

for an arbitrary starting index: (map vector (iterate inc 10) [:a :b :c])

(doall ...) walks a sequence and returns elements (forces effects)
(dorun ...) walks a sequence and also forces effects, but does not keep past elements in memory (does not retain the head)

reverse a string
(apply str (reverse "hello"))
the value of (reverse ...) is a seq of characters

(re-seq regexp string) is preferred over (re-matcher regexp string)

(re-seq #"\w+" "the quick brown fox")

to read files, slurp can be used. a with-open is not lazy, so lazy actions must be forced inside it. once with-open exits, the stream is closed

(require '[clojure.java.io :refer [reader]])

(with-open [rdr (reader "/home/heitor/code/learn-code/clojure/notes.txt")]
  (count (line-seq rdr)))

(with-open [rdr (reader "/home/heitor/code/learn-code/clojure/notes.txt")]
  (doseq [line (line-seq rdr)] (println line)))

(contains? coll key) checks if key is in coll (maps and sets). for vectors and arrays, it checks if the numeric key is in the range of indices.

maps can be searched or edited with assoc, dissoc, select-keys and merge

merge-with takes a function that is called when two or maps have the same key
(merge-with concat map1 map2 map3)

concat joins seqs and returns a LazySeq

(require '[clojure.set :as set]) loads clojure.set. it has the following functions:
union, intersection, difference, select, rename, project, join

functions and expressions are not lazy, but sequences are, generally.

referential transparency is the ability of a function to be replaced by its resulting value at any time.

Programming Clojure FP guidelines

1. do not use direct recursion. JVM does not optimize recursive calls
2. use recur if there are few recursive steps
3. always be lazy when dealing with large or variable-sized sequences
4. do not realize more of a lazy sequence than needed
5. know the sequence API well and avoid guidelines 1 to 3
6. subdivide the problem into smaller pieces

functions defined in (letfn [fns] body) can call themselves or each other

(lazy-seq body) is a macro that creates a lazy sequence. the body is invoked only when (seq) is called directly or indirectly

wrap the recursive part of a function body with (lazy-seq ...) to replace recursion with laziness

(take 5 (iterate (fn [[a b]] [b (+ a b)]) [0 1]))

(map first ...) takes the first value of each vector (pair of numbers)

(partition size step? coll) divides a collection into equal sized chunks

(comp f & fs) composes functions

(declare my-odd? my-even?) will create both vars (with no initial binding) in a single line

(trampoline f & partial-args) manages its own recur (to recursively call other functions). it is not widely used. one way of preparing functions for trampoline is adding # to the original recursive calls 

to break a recursion, wrap it with lazy-seq

(def m (memoize m)) will rebind m to a memoized version of itself

to build the memoized function's cache, map the function over the range of possible inputs

(def m-seq (map m (iterate inc 0)))
