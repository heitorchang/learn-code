See also: good-practice/clojure.md

Integer division: quot and rem

BigDecimal: 0.0123M 
BigInt: 100991N 
(these are contagious)

Collection types:
list () : must be quoted or it will be interpreted as a function call
vector []
map {}
set #{}

regexp #""

keywords begin with a colon (an advantage over strings is being able to look themselves up in a map)
:points

evaluating a lazy expression is called "realizing" the expression

(declare x y z) creates these vars with no initial binding at the same time

(defrecord Book [title author])
(def anne-with-an-e
  (->Book "Anne of Green Gables" "Lucy Maud Montgomery"))
(:title anne-with-an-e)

Book behaves almost like any regular map

strings must use double quotes

concatenate strings: (str "one plus two is " (+ 1 2))

(println "some text")

\a \b \c \space \return \newline (\r\n or CRLF)

true, false are booleans

in a Boolean context, only nil, false evaluate to "false"

0 and () are not "false"

(true? x) tests if x is exactly the "true" value (only true will return true)
nil? and false? also only test for nil and false

zero? works with 0 and 0.0

a closure is a function that remembers the environment values associated with it when it was created.

(java.util.Random.) is the same as (new java.util.Random)

(def rnd (java.util.Random.))

. (dot special form) is used to call methods and access instance fields. It also works for static methods and fields
in case both a method and field exist, the method is preferred. prefix with - to access the field.

(. rnd nextInt)

(.nextInt rnd) calls the instance method
(.-field instance)
(Class/method args)
Class/field

java.lang classes are imported automatically

evaluate
(import '(java.util Random Locale)
	'(java.text MessageFormat))

and the classes may be called directly (Random, Locale, MessageFormat

;; comments

(comment
  this is a macro
  )

#_(this form is ignored)

(do ...) is used to execute side effects

(loop) sets a recursion point, targeted by (recur)

(loop [result [] x 5]
  (if (zero? x)
    result
    (recur (conj result x) (dec x))))

recur can go back to the top of a function



