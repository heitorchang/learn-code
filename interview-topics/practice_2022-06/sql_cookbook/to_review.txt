-- MUST REVIEW: interesting recipes
-- HINT: typing \gdesc at the end of the interactive console shows the type of the result

-- rn: row number

-- 7.9
-- 7.11
-- 8.5 (how to pick a specific name from a list)
-- select current_date; for "now()"
-- date_trunc('year', current_date) returns a timestamp with time zone (might want to cast it as date)
-- 9.3
-- 9.10
-- 9.13
-- LAG, LEAD
-- 10.4 (generate_series solution)


-- selecting from an integer range
select i from
  (select generate_series(1, 10) as i) x
where i between 3 and 6;

-- better range
select i from generate_series(1, 10) as t(i) -- or 'select t.i ...'
where i between 3 and 6;

-- join ranges
select i, j from generate_series(1, 10) as t(i)
join (select j from generate_series(5, 19) as t(j)) x
on i = j;

-- create range of dates
select * from generate_series('15-jan-1999'::date, '15-dec-1999'::date, '1 month');
-- PROBLEM: looks like because of daylight savings, a day is not included at the end

-- all days of a month
select * from generate_series('2022-07-01'::date, '2022-07-01'::date + interval '1 month' - interval '1 day', '1 day');

-- all first of months
select * from generate_series(date_trunc('year', current_date), date_trunc('year', current_date) + interval '1 year' - interval '1 day', '1 month');

-- alternative method
select '2020-01-15'::date + gs.id - 1 from generate_series(1, 15) as gs(id);
-- subtract 1 to avoid off-by-one error. This returns 15 rows.

-- to_char(hiredate, 'month')

-- casting
select cast('123' as integer);
select total::text;
select '02-feb-2020'::date;

-- replace string
replace(source, old, new);

-- substr index is 1-based
substr(str, from, count)


3.4 NOT EXISTS

3.6 scalar subquery

-- group hires by year and month (similar to first technical interview)

with cte as (
  select ename, hiredate, extract(year from hiredate) || '-' || extract(month from hiredate) as yrmo
  from emp
)
select ename, yrmo, count(*) over (partition by yrmo),
-- PROBLEM: without ename, partition will only sum 11 rows, because there are only 11 unique yrmos. window functions run last.
count(*) over () as total
from cte
group by yrmo; -- culprit, was grouping by before the window function


select distinct extract(month from hiredate), count(*) over (partition by extract(month from hiredate)) from emp;

-- over () is actually over (rows between unbounded preceding and current row)
-- use primary keys in over (order by x, pk) to avoid adding repeated values

-- solution: use DISTINCT
select distinct extract(yr from hiredate) as yr, extract(month from hiredate) as mo, count(*) over (partition by extract(yr from hiredate), extract(month from hiredate))
from emp;

-- cleaner
with formatted_dates as (
  select to_char(hiredate, 'yyyy-mm') as yrmo
  from emp
), totals as (
  select yrmo,
  count(*) over (partition by yrmo) as ct
  from formatted_dates
)
select distinct yrmo, ct from totals
order by yrmo;


-- without window function
-- select table with values as outer table, and counts of data as subquery
with cte as (
select yrmo,
(select count(*) from emp e where to_char(hiredate, 'yyyy-mm') = yrmo) as ct
from year_months
)
select yrmo, ct from cte
where ct > 0
order by yrmo;


-- figure out:
-- sum(sales) over (order by date1 rows between 2 preceding and current row) should only be valid when there are 3 available rows (first two rows should be NULL)
