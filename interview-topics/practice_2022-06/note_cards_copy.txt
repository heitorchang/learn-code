# PYTHON LANGUAGE

## Primitive types and collections

Primitive: int, float, boolean
Primitive collections: str, list, tuple, dict, set

from collections module: Counter, namedtuple, OrderedDict, deque, UserDict

math.isnan(float('nan'))
float('inf')


## Immutable vs. mutable

immutable: tuple, str, bytes
mutable: list, deque, bytearray, array.array, memoryview


## Classes, inheritance

A class is a type, a blueprint for creating objects.
Created objects are called instances.

a class and instances have attributes and methods.

nonlocal: looks up variable in enclosing scope

class Dog:
    kind = 'canine' # class attribute

    def __init__(self, name):
        self.name = name

d = Dog('Fido')

class Derived(BaseClass):
    ...

type(obj)
isinstance(obj, str/list/int)

super() returns a proxy object

class Rect:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width


class Square(Rect):
    def __init__(self, side):
        super().__init__(side, side)


## Regex

import re
pat = re.compile(r'[0-9]+')

pat.findall('3 apples 2 cherries')
pat.sub('some', '3 apples 2 cherries'')


# SQL

## DSN, Connection

DSN = "host=127.0.0.1 port=5432 dbname=mydb user=heitor password=secret123"

with psycopg2.connect(DSN) as conn:
    with conn.cursor() as cur:
        cur.execute("select * from tbl;")
	for row in cur.fetchall():
	    print(row)


## CRUD

SELECT col FROM tbl where col2 = val;
INSERT INTO tbl (col1, col2) values (val1, val2);
UPDATE tbl set col1 = val1 where col2 = val2;
DELETE FROM tbl where col = val;


## Grouping and Aggregates

select count(*) as ct ... group by user_id
having ct > 3;

max, min, avg, sum
use HAVING for aggregates (WHERE cannot be used)


## Joins

select ... from game g
join session s
using(game_id)

when column names do not match:

on player_one = g.gamer_id

left/right (outer) joins
full join

it's ok to repeat the table, using aliases (self join)

CROSS JOIN: Cartesian product


## Primary key, foreign key, index

PK: column that uniquely identifies a record (row)
FK: column(s) that refer to the PK of another table
Index: special lookup table that speeds up retrieval


## Sets

union all
intersect
not in

union removes duplicates


## subqueries

select ...
where name in (select ... from ...)

... where id = (select ... from ... where ...)


## Common Table Expression (CTE) vs. View

with my_cte as (
    select ...
), data_cte as (
    select ...
)
select ... from data_cte

CTE = disposable view
view takes up disk space
view can be indexed
CTE can be recursive


## Window functions

uses 'OVER' clause

select duration, sum(duration) over (order by start)
as running_total
from bikeshare;


## sample SQL query that combines several clauses

select g.name game_name, sum(hours_played) hrs from session
join game g using(game_id)
where g.name like 'S%'
group by game_name
having sum(hours_played) > 3;

# DATA STRUCTURES

## Stack, queue, deque

Use a list. Technically, a Python list is already a stack

class Stack:
    def __init__(self):
        self._items = []

    def push(self, item):
        self._items.append(item)

    def pop(self):
        return self._items.pop()

    def peek(self):
        return self._items[-1]

queue: insert(0, item)

deque: collections.deque
there are appendleft and popleft methods


## Linked list

class Node:
    def __init__(self, data):
        self._data = data
        self._next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add(self, item):
        temp = Node(item)
        temp._next = self.head
        self.head = temp


## Priority Queue with a Binary heap

(with 0-based list)
left child of item at p:  2p + 1
right child of item at p: 2p + 2
parent: (p - 1) // 2

class BinaryHeap:
    def __init__(self):
    self._heap = []

to insert: add to end of list, then perc_up
delete: remove first item, move last item to top then perc_down.
perc_down uses get_min_child

to build heap: start with the unordered list.
iterate from end to 0, running perc_down(index)


## Graphs

G(V, E)

Vertex / node can have a payload

Edge can have a weight


## Graph adjacency list

{
    "v0": {
        "v1": weight0_1,
        "v5": weight0_5
    },
    "v1": { ... },
    "v5": { ... }
}

or

{
    0: [1, 3, 4],
    1: [3, 4],
    3: [0],
    4: []
}

# ALGORITHMS

## Euclid's GCD

def euclid_gcd(lg, sm):
    if sm == 0:
        return lg
    return euclid_gcd(sm, lg % sm)

sm takes place of lg
lg becomes the remainder


## Tower of Hanoi

def move(height, from, to, with):
    if height > 0:
        move(height - 1, from, with, to)
        print(f"moving {from} to {to})
        move(height - 1, with, to, from)


## Tree Traversal

(from interviewkickstart.com)

class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

n1 = Node(1)
n2 = Node(2)
...
n1.left = n2
...

result = []
def pre_order_traversal(root):
    if root:
        result.append(root.data)
        pre_order_traversal(root.left)
        pre_order_traversal(root.right)

post_order_traversal:
left, right, root.data

in_order_traversal:
left, root.data, right


## Binary search

def binary_search(alist, item):
    first = 0
    last = len(alist) - 1
    while first <= last:
        midpoint = (first + last) // 2
        if alist[midpoint] == item:
            return True
        elif item < alist[midpoint]:
            last = midpoint - 1
        else:
            first = midpoint + 1
    return False


### from: sorting.py

## Bubble sort

def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        for j in range(i):
            if alist[j] > alist[j+1]:
                alist[j], alist[j+1] = alist[j+1], alist[j]


## Insertion sort

def insertion_sort(alist):
    for i in range(1, len(alist)):
        curval = alist[i]
        curpos = i

        while curpos > 0 and alist[curpos-1] > curval:
            # shift items
            alist[curpos] = alist[curpos-1]
            curpos -= 1
        alist[curpos] = curval


## merge sort

def merge_sort(alist):
    if len(alist) > 1:
        mid = len(alist) // 2
        left = alist[:mid]
        right = alist[mid:]

        merge_sort(left)
        merge_sort(right)

        i, j, k = 0, 0, 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                alist[k] = left[i]
                i += 1
            else:
                alist[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            alist[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            alist[k] = right[j]
            j += 1
            k += 1


## Quicksort
def quick_sort(a_list):
    quick_sort_helper(a_list, 0, len(a_list) - 1)


def quick_sort_helper(a_list, first, last):
    if first < last:
        split = partition(a_list, first, last)
        quick_sort_helper(a_list, first, split - 1)
        quick_sort_helper(a_list, split + 1, last)


def partition(a_list, first, last):
    pivot_val = a_list[first]
    left_mark = first + 1
    right_mark = last
    done = False

    while not done:
        while left_mark <= right_mark and a_list[left_mark] <= pivot_val:
            left_mark = left_mark + 1
        while left_mark <= right_mark and a_list[right_mark] >= pivot_val:
            right_mark = right_mark - 1
        if right_mark < left_mark:
            done = True
        else:
            a_list[left_mark], a_list[right_mark] = (
                a_list[right_mark],
                a_list[left_mark],
            )
    a_list[first], a_list[right_mark] = a_list[right_mark], a_list[first]

    return right_mark


## Hashing

a hash table is a collection of items stored in slots so that it's easier
to find a given item.

hash function: maps an item to the slot where it belongs.
Example: h(item) = item % 11
(with 11 slots in the hashtable)


## Breadth-First Search (BFS)

from collections import deque


class Graph:
    adj = {}

    def __init__(self, vertices):
        for v in vertices:
            self.adj[v] = []

    def addEdge(self, v, w):
        self.adj[v].append(w)
        self.adj[w].append(v)

    def v(self):
        return len(self.adj)

    def __str__(self):
        return str(self.adj)


def bfsConnectedComponent(G, v):
    queue = deque([v])
    visited = set([v])
    component = set()

    while len(queue) > 0:
        current = queue.popleft()
        component.add(current)
        for v in G.adj[current]:
            if v not in visited:
                queue.append(v)
	        visited.add(v)

    return component


def test_bfs():
    graph = Graph([1, 2, 3, 4, 5, 6])
    graph.addEdge(1, 2)
    graph.addEdge(2, 3)
    graph.addEdge(2, 4)
    graph.addEdge(3, 4)
    graph.addEdge(5, 6)

    print(bfsConnectedComponent(graph, 1))


## Depth-First Search (DFS)

def dfsConnectedComponent(G, v):
    stack = [v]
    visited = set([v])
    component = set()

    while len(stack) > 0:
        current = stack.pop()
        print(current)
        component.add(current)
        for v in G.adj[current]:
            if v not in visited:
                stack.append(v)
	        visited.add(v)

    return component


def test_dfs():
    graph = Graph([1, 2, 3, 4, 5, 6])
    graph.addEdge(1, 2)
    graph.addEdge(2, 3)
    graph.addEdge(2, 4)
    graph.addEdge(3, 4)
    graph.addEdge(5, 6)

    print(dfsConnectedComponent(graph, 1))


## Dijkstra's Algorithm (shortest path)

online implementation uses the module "heapq"

from scipy.sparse.csgraph import dijkstra

(algorithm is pretty complicated, study dijkstra.py)


## Prim's Spanning Tree

Uses Priority Queue

No code (too complex)
